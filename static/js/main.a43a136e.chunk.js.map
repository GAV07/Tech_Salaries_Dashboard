{"version":3,"sources":["cleaning/PreDataHandling.js","components/Preloader.js","utils/utils.js","chart/Chart.jsx","components/CountyMap.js","chart/Bars.jsx","chart/Axis.jsx","chart/MedianLine.js","components/Histogram.jsx","USStatesMap.js","components/Copy.js","components/Controls.jsx","App.js","cleaning/PostDataHandling.js","serviceWorker.js","index.js"],"names":["cleanIncome","d","countyName","USstate","medianIncome","Number","lowerBound","upperBound","dateParse","d3","cleanSalary","employer","submit_date","start_date","case_status","job_title","clean_job_title","base_salary","city","county","countyID","cleanUSStateName","code","id","name","cleanCounty","loadAllData","a","Promise","all","datasets","us","countyNames","medianIncomes","techSalaries","USstateNames","medianIncomesMap","filter","_","find","forEach","isNull","usTopoJson","medianIncomesByCounty","groupBy","medianIncomesByUSState","Preloader","className","type","color","callAccessor","accessor","i","combineChartDimensions","dimensions","parsedDimensions","marginTop","marginRight","marginBottom","marginLeft","boundedHeight","Math","max","height","boundedWidth","width","useChartDimensions","passedSettings","ref","useRef","useState","changeWidth","changeHeight","useEffect","element","current","resizeObserver","ResizeObserver","entries","Array","isArray","length","entry","contentRect","observe","unobserve","newSettings","ChartContext","createContext","Chart","title","children","Provider","value","transform","ChoroplethColors","reverse","County","geoPath","feature","quantize","zoom","key","style","fill","CountyMap","values","projection","scale","translate","range","USstatePaths","topojson","objects","states","features","centroid","domain","USstatesMesh","b","counties","countyValueMap","fromPairs","map","stroke","strokeLinejoin","Bars","data","keyAccessor","xAccessor","yAccessor","widthAccessor","heightAccessor","props","Fragment","x","y","axisComponentsByDimension","label","formatTick","numberOfTicks","ticks","x2","tick","y2","Axis","dimension","useContext","Component","defaultProps","MedianLine","bottomMargin","median","yScale","line","medianValue","medianLabel","tickFormat","textAnchor","background","Histogram","medianHousehold","xScale","nice","bins","thresholds","binsGenerator","x0","x1","Title","filteredSalaries","filteredBy","yearsFragment","year","USstateFragment","USStatesMap","toUpperCase","jobTitleFragment","jobTitle","mean","format","Description","this","allData","getFullYear","deviation","UStateFragment","previousYearFragment","countyFragment","fragment","lastYear","allDataForYear","allDataForJobTitle","allDataForUSstate","toFixed","percent","abs","byCounty","medians","ordered","sortBy","keys","items","best","countyMedian","byCity","S","titleCase","s","jobFragment","replace","yearFragment","href","React","Toggle","onClick","ControlRow","toggleNames","picked","updateDataFilter","capitalize","makePick","newState","Controls","locationHash","window","location","hash","split","setFilteredBy","filterFunctions","setFilter","updateYearFilter","reset","yearFilter","updateJobTitleFilter","jobTitleFilter","updateUSstateFilter","USstateFilter","join","years","Set","jobTitles","USstates","from","App","setDatasets","salariesFilter","setSalariesFilter","loadData","filteredSalariesMap","countyValues","techSalariesMap","salaries","countyValue","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a43a136e.chunk.js","sourcesContent":["import * as d3 from \"d3\"\nimport _ from \"lodash\"\n\nconst cleanIncome = (d) => ({\n  countyName: d[\"Name\"],\n  USstate: d[\"State\"],\n  medianIncome: Number(d[\"Median Household Income\"]),\n  lowerBound: Number(d[\"90% CI Lower Bound\"]),\n  upperBound: Number(d[\"90% CI Upper Bound\"]),\n})\n\nconst dateParse = d3.timeParse(\"%m/%d/%Y\")\nconst cleanSalary = (d) => {\n  if (!d[\"base salary\"] || Number(d[\"base salary\"]) > 300000) {\n    return null\n  }\n  return {\n    employer: d.employer,\n    submit_date: dateParse(d[\"submit date\"]),\n    start_date: dateParse(d[\"start date\"]),\n    case_status: d[\"case status\"],\n    job_title: d[\"job title\"],\n    clean_job_title: d[\"job title\"],\n    base_salary: Number(d[\"base salary\"]),\n    city: d[\"city\"],\n    USstate: d[\"state\"],\n    county: d[\"county\"],\n    countyID: d[\"countyID\"],\n  }\n}\n\nconst cleanUSStateName = (d) => ({\n  code: d.code,\n  id: Number(d.id),\n  name: d.name,\n})\n\nconst cleanCounty = (d) => ({\n  id: Number(d.id),\n  name: d.name,\n})\n\nexport const loadAllData = async () => {\n    const datasets = await Promise.all([\n      d3.json(\"data/us.json\"),\n      d3.csv(\"data/us-county-names-normalized.csv\", cleanCounty),\n      d3.csv(\"data/county-median-incomes.csv\", cleanIncome),\n      d3.csv(\"data/h1bs-2012-2016.csv\", cleanSalary),\n      d3.tsv(\"data/us-state-names.tsv\", cleanUSStateName),\n    ]) \n\n    let [us, countyNames, medianIncomes, techSalaries, USstateNames] = datasets\n    let medianIncomesMap = {};\n\n    medianIncomes.filter(d => _.find(countyNames, {name: d['countyName']}))\n                 .forEach((d) => {\n                     d['countyID'] = _.find(countyNames, {name: d['countyName']}).id;\n                     medianIncomesMap[d.countyID] = d;\n                 });\n    techSalaries = techSalaries.filter(d => !_.isNull(d));\n    \n    return {\n        usTopoJson: us,\n        countyNames: countyNames,\n        medianIncomes: medianIncomesMap,\n        medianIncomesByCounty: _.groupBy(medianIncomes, 'countyName'),\n        medianIncomesByUSState: _.groupBy(medianIncomes, 'USstate'),\n        techSalaries: techSalaries,\n        USstateNames: USstateNames\n    }\n}","import React from 'react'\nimport ReactLoading from 'react-loading'\n//import PreloaderImg from '../images/preloader-screenshot.png'\n\nconst Preloader = () => (\n    <div className=\"App\">\n        <ReactLoading type={\"bars\"} color={\"#000000\"} />\n        <h2>Loading Dope Viz</h2>\n    </div>\n\n) \n\nexport default Preloader","//import PropTypes from 'prop-types'\nimport { useEffect, useState, useRef } from \"react\"\nimport ResizeObserver from \"resize-observer-polyfill\"\n\n// export const accessorPropsType = (\n//     PropTypes.oneOfType([\n//       PropTypes.func,\n//       PropTypes.number,\n//     ])\n//   )\n  \n  export const callAccessor = (accessor, d, i) => (\n    typeof accessor === \"function\" ? accessor(d, i) : accessor\n  )\n  \n  // export const dimensionsPropsType = (\n  //   PropTypes.shape({\n  //     height: PropTypes.number,\n  //     width: PropTypes.number,\n  //     marginTop: PropTypes.number,\n  //     marginRight: PropTypes.number,\n  //     marginBottom: PropTypes.number,\n  //     marginLeft: PropTypes.number,\n  //   })\n  // )\n  \n\n\nexport const combineChartDimensions = dimensions => {\n    let parsedDimensions = {\n      marginTop: 40,\n      marginRight: 30,\n      marginBottom: 40,\n      marginLeft: 75,\n      ...dimensions,\n    }\n  \n    return {\n      ...parsedDimensions,\n      boundedHeight: Math.max(parsedDimensions.height - parsedDimensions.marginTop - parsedDimensions.marginBottom, 0),\n      boundedWidth: Math.max(parsedDimensions.width - parsedDimensions.marginLeft - parsedDimensions.marginRight, 0),\n    }\n  }\n\nexport const useChartDimensions = passedSettings => {\n    const ref = useRef()\n    const dimensions = combineChartDimensions(passedSettings)\n  \n    const [width, changeWidth] = useState(0)\n    const [height, changeHeight] = useState(0)\n  \n    useEffect(() => {\n      if (dimensions.width && dimensions.height) return [ref, dimensions]\n  \n      const element = ref.current\n      const resizeObserver = new ResizeObserver(entries => {\n        if (!Array.isArray(entries)) return\n        if (!entries.length) return\n  \n        const entry = entries[0]\n  \n        if (width !== entry.contentRect.width) changeWidth(entry.contentRect.width)\n        if (height !== entry.contentRect.height) changeHeight(entry.contentRect.height)\n      })\n  \n      resizeObserver.observe(element)\n  \n      return () => resizeObserver.unobserve(element)\n    }, [passedSettings, height, width, dimensions])\n  \n    const newSettings = combineChartDimensions({\n      ...dimensions,\n      width: dimensions.width || width,\n      height: dimensions.height || height,\n    })\n  \n    return [ref, newSettings]\n  }\n\nlet lastId = 0\nexport const useUniqueId = (prefix=\"\") => {\n  lastId++\n  return [prefix, lastId].join(\"-\")\n}","import React, { createContext, useContext } from \"react\"\n\nimport \"./Chart.css\"\n\nconst ChartContext = createContext()\nexport const useChartDimensions = () => useContext(ChartContext)\n\nconst Chart = ({ dimensions, title, children }) => (\n  <ChartContext.Provider value={dimensions}>\n    <svg className=\"Chart\" width={dimensions.width} height={dimensions.height}>\n      <text \n        className=\"Title\"\n        transform={`translate(${dimensions.boundedWidth / 2}, 30)`}\n        >{title}</text>\n      <g transform={`translate(${dimensions.marginLeft}, ${dimensions.marginTop})`}>\n        { children }\n      </g>\n    </svg>\n  </ChartContext.Provider>\n)\n\nexport default Chart\n","import React from 'react'\nimport * as d3 from 'd3'\nimport { useChartDimensions } from \"../utils/utils\"\nimport Chart from \"../chart/Chart\"\nimport * as topojson from 'topojson'\nimport _ from 'lodash'\n\n\nconst ChoroplethColors = _.reverse([\n    \"rgb(247,251,255)\",\n    \"rgb(222,235,247)\",\n    \"rgb(198,219,239)\",\n    \"rgb(158,202,225)\",\n    \"rgb(107,174,214)\",\n    \"rgb(66,146,198)\",\n    \"rgb(33,113,181)\",\n    \"rgb(8,81,156)\",\n    \"rgb(8,48,107)\",\n])\nconst BlankColor = \"rgb(240,240,240)\"\n\nconst County = ({ geoPath, feature, zoom, key, quantize, value }) => {\n    let color = BlankColor\n    if (value) {\n      color = ChoroplethColors[quantize(value)]\n    }\n    return (\n      <path d={geoPath(feature)} style={{ fill: color }} title={feature.id} />\n    )\n}\n\nconst CountyMap = ({ usTopoJson, USstateNames, zoom, values }) => {\n\n        const [ref, dimensions] = useChartDimensions()\n        const projection = d3.geoAlbersUsa()\n            .scale(1280)\n            .translate([dimensions.boundedWidth / 2, dimensions.boundedHeight / 2])\n            .scale(dimensions.boundedWidth * 1.3)\n        const geoPath = d3.geoPath().projection(projection)\n        const quantize = d3.scaleQuantize().range(d3.range(9))\n\n        if (zoom && usTopoJson) {\n            const us = usTopoJson,\n                USstatePaths = topojson.feature(us, us.objects.states).features,\n                id = _.find(USstateNames, { code: zoom }).id\n            projection.scale(dimensions.width * 4.5)\n            const centroid = geoPath.centroid(_.find(USstatePaths, { id: id })),\n                translate = projection.translate()\n            projection.translate([\n                translate[0] - centroid[0] + dimensions.boundedWidth / 2,\n                translate[1] - centroid[1] + dimensions.boundedHeight / 2,\n            ])\n        }\n        if (values) {\n            quantize.domain([\n                d3.quantile(values, 0.15, (d) => d.value),\n                d3.quantile(values, 0.85, (d) => d.value),\n            ])\n        }\n\n        if (!usTopoJson) {\n            return null;\n        } else {\n            const us = usTopoJson,\n            USstatesMesh = topojson.mesh(us, us.objects.states, (a, b) => a !== b),\n            counties = topojson.feature(us, us.objects.counties).features\n            const countyValueMap = _.fromPairs(values.map((d) => [d.countyID, d.value]))\n\n          return (\n            <div className=\"Map\" ref={ref}>\n              <Chart dimensions={dimensions}>\n                    {counties.map((feature) => (\n                      <County\n                        geoPath={geoPath}\n                        feature={feature}\n                        zoom={zoom}\n                        key={feature.id}\n                        quantize={quantize}\n                        value={countyValueMap[feature.id]}\n                      />\n                    ))}\n                    <path\n                      d={geoPath(USstatesMesh)}\n                      style={{\n                        fill: \"none\",\n                        stroke: \"#fff\",\n                        strokeLinejoin: \"round\",\n                      }}\n                    />\n              </Chart>\n            </div>\n            \n          )\n        }\n    }\n\n\nexport default CountyMap;","import React from \"react\"\nimport * as d3 from 'd3'\nimport { callAccessor } from \"../utils/utils\";\n\nconst Bars = ({ data, keyAccessor, xAccessor, yAccessor, widthAccessor, heightAccessor, ...props }) => (\n  <React.Fragment>\n    {data.map((d, i) => (\n      <rect {...props}\n        className=\"Bars__rect\"\n        key={keyAccessor(d, i)}\n        x={callAccessor(xAccessor, d, i)}\n        y={callAccessor(yAccessor, d, i)}\n        width={d3.max([callAccessor(widthAccessor, d, i), 0])}\n        height={d3.max([callAccessor(heightAccessor, d, i), 0])}\n      />\n    ))}\n  </React.Fragment>\n)\n\n\nexport default Bars\n\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3 from 'd3'\n//import { dimensionsPropsType } from \"../utils/utils\";\nimport { useChartDimensions } from \"./Chart\";\n\nconst axisComponentsByDimension = {\n  x: AxisHorizontal,\n  y: AxisVertical,\n}\nconst Axis = ({ dimension, ...props }) => {\n  const dimensions = useChartDimensions()\n  const Component = axisComponentsByDimension[dimension]\n  if (!Component) return null\n\n  return (\n    <Component\n      dimensions={dimensions}\n      {...props}\n    />\n  )\n}\n\n// Axis.propTypes = {\n//   dimension: PropTypes.oneOf([\"x\", \"y\"]),\n//   dimensions: dimensionsPropsType,\n//   scale: PropTypes.func,\n//   label: PropTypes.string,\n//   formatTick: PropTypes.func,\n// }\n\nAxis.defaultProps = {\n  dimension: \"x\",\n  scale: null,\n  formatTick: d3.format(\",\"),\n}\n\nexport default Axis\n\n\nfunction AxisHorizontal ({ dimensions, label, formatTick, scale, ...props }) {\n  const numberOfTicks = dimensions.boundedWidth < 600\n        ? dimensions.boundedWidth / 100\n        : dimensions.boundedWidth / 250\n\n  const ticks = scale.ticks(numberOfTicks)\n\n  return (\n    <g className=\"Axis AxisHorizontal\" transform={`translate(0, ${dimensions.boundedHeight})`} {...props}>\n      <line\n        className=\"Axis__line\"\n        x2={dimensions.boundedWidth}\n      />\n\n      {ticks.map((tick, i) => (\n        <text\n          key={tick}\n          className=\"Axis__tick\"\n          transform={`translate(${scale(tick)}, 25)`}\n        >\n          { formatTick(tick) }\n        </text>\n      ))}\n\n      {label && (\n        <text\n          className=\"Axis__label\"\n          transform={`translate(${dimensions.boundedWidth / 2}, 60)`}\n        >\n          { label }\n        </text>\n      )}\n    </g>\n  )\n}\n\nfunction AxisVertical ({ dimensions, label, formatTick, scale, ...props }) {\n  const numberOfTicks = dimensions.boundedHeight / 70\n\n  const ticks = scale.ticks(numberOfTicks)\n\n  return (\n    <g className=\"Axis AxisVertical\" {...props}>\n      <line\n        className=\"Axis__line\"\n        y2={dimensions.boundedHeight}\n      />\n\n      {ticks.map((tick, i) => (\n        <text\n          key={tick}\n          className=\"Axis__tick\"\n          transform={`translate(-16, ${scale(tick)})`}\n        >\n          { formatTick(tick) }\n        </text>\n      ))}\n\n      {label && (\n        <text\n          className=\"Axis__label\"\n          style={{\n            transform: `translate(-56px, ${dimensions.boundedHeight / 2}px) rotate(-90deg)`\n          }}\n        >\n          { label }\n        </text>\n      )}\n    </g>\n  )\n}\n","import React from \"react\"\nimport * as d3 from \"d3\"\n\nconst MedianLine = ({\n  data,\n  value,\n  width,\n  height,\n  x,\n  y,\n  bottomMargin,\n  median,\n}) => {\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, d3.max(data, value)])\n      .range([height - y - bottomMargin, 0]),\n\n    line = d3.line()([\n      [0, 5],\n      [width, 5],\n    ])\n    \n    const medianValue = median || d3.median(data, value)\n    const translate = `translate(${x}, ${yScale(medianValue)})`,\n        medianLabel = `Median Household: $${yScale.tickFormat()(median)}`\n    return (\n        <g className=\"mean\" transform={translate}>\n        <text\n            x={width - 5}\n            y=\"0\"\n            textAnchor=\"end\"\n            style={{ background: \"purple\" }}\n        >\n            {medianLabel}\n        </text>\n        <path d={line} />\n        </g>\n    )\n}\n\n\n\nexport default MedianLine","import React from \"react\"\nimport * as d3 from \"d3\"\nimport Chart from \"../chart/Chart\"\nimport Bars from \"../chart/Bars\"\nimport Axis from \"../chart/Axis\"\nimport MedianLine from '../chart/MedianLine'\n\nimport { useChartDimensions } from \"../utils/utils\"\n\n\n\nconst Histogram = ({ data, xAccessor, medianHousehold, }) => {\n  \n  const [ref, dimensions] = useChartDimensions({\n    marginBottom: 77,\n  })\n\n  const numberOfThresholds = 9\n\n  const xScale = d3.scaleLinear()\n    .domain(d3.extent(data, xAccessor))\n    .range([0, dimensions.boundedHeight])\n    .nice(numberOfThresholds)\n\n  const binsGenerator = d3.histogram()\n    .domain(xScale.domain())\n    .value(xAccessor)\n    .thresholds(xScale.ticks(numberOfThresholds))\n\n  const bins = binsGenerator(data)\n\n  const yAccessor = d => d.length\n  const yScale = d3.scaleLinear()\n    .domain([0, d3.max(bins, yAccessor)])\n    .range([0 , dimensions.boundedHeight])\n    .nice()\n\n  const barPadding = 2\n\n  const xAccessorScaled = d => xScale(d.x0) + barPadding\n  const yAccessorScaled = 0\n  const widthAccessorScaled = d => xScale(d.x1) - xScale(d.x0) - barPadding\n  const heightAccessorScaled = d => yScale(yAccessor(d))\n  const keyAccessor = (d, i) => i\n\n  return (\n    <div className=\"Histogram\" ref={ref}>\n      <Chart dimensions={dimensions}>\n        <Axis\n          dimensions={dimensions}\n          dimension=\"y\"\n          scale={xScale}\n        />\n        <Bars\n          data={bins}\n          keyAccessor={keyAccessor}\n          yAccessor={xAccessorScaled}\n          xAccessor={yAccessorScaled}\n          heightAccessor={widthAccessorScaled}\n          widthAccessor={heightAccessorScaled}\n        />\n        <MedianLine \n            data={data}\n            x={500}\n            y={10}\n            width={600}\n            height={500}\n            bottomMargin={5}\n            median={medianHousehold}\n            value={d => d.base_salary} />\n      </Chart>\n    </div>\n  )\n}\n\nexport default Histogram\n","\nexport default {\n    \"AL\": \"Alabama\",\n    \"AK\": \"Alaska\",\n    \"AS\": \"American Samoa\",\n    \"AZ\": \"Arizona\",\n    \"AR\": \"Arkansas\",\n    \"CA\": \"California\",\n    \"CO\": \"Colorado\",\n    \"CT\": \"Connecticut\",\n    \"DE\": \"Delaware\",\n    \"DC\": \"District Of Columbia\",\n    \"FM\": \"Federated States Of Micronesia\",\n    \"FL\": \"Florida\",\n    \"GA\": \"Georgia\",\n    \"GU\": \"Guam\",\n    \"HI\": \"Hawaii\",\n    \"ID\": \"Idaho\",\n    \"IL\": \"Illinois\",\n    \"IN\": \"Indiana\",\n    \"IA\": \"Iowa\",\n    \"KS\": \"Kansas\",\n    \"KY\": \"Kentucky\",\n    \"LA\": \"Louisiana\",\n    \"ME\": \"Maine\",\n    \"MH\": \"Marshall Islands\",\n    \"MD\": \"Maryland\",\n    \"MA\": \"Massachusetts\",\n    \"MI\": \"Michigan\",\n    \"MN\": \"Minnesota\",\n    \"MS\": \"Mississippi\",\n    \"MO\": \"Missouri\",\n    \"MT\": \"Montana\",\n    \"NE\": \"Nebraska\",\n    \"NV\": \"Nevada\",\n    \"NH\": \"New Hampshire\",\n    \"NJ\": \"New Jersey\",\n    \"NM\": \"New Mexico\",\n    \"NY\": \"New York\",\n    \"NC\": \"North Carolina\",\n    \"ND\": \"North Dakota\",\n    \"MP\": \"Northern Mariana Islands\",\n    \"OH\": \"Ohio\",\n    \"OK\": \"Oklahoma\",\n    \"OR\": \"Oregon\",\n    \"PW\": \"Palau\",\n    \"PA\": \"Pennsylvania\",\n    \"PR\": \"Puerto Rico\",\n    \"RI\": \"Rhode Island\",\n    \"SC\": \"South Carolina\",\n    \"SD\": \"South Dakota\",\n    \"TN\": \"Tennessee\",\n    \"TX\": \"Texas\",\n    \"UT\": \"Utah\",\n    \"VT\": \"Vermont\",\n    \"VI\": \"Virgin Islands\",\n    \"VA\": \"Virginia\",\n    \"WA\": \"Washington\",\n    \"WV\": \"West Virginia\",\n    \"WI\": \"Wisconsin\",\n    \"WY\": \"Wyoming\"\n};\n","import React from \"react\";\nimport * as d3 from 'd3'\nimport _ from \"lodash\";\nimport S from \"string\";\n\nimport USStatesMap from \"../USStatesMap\";\n\nconst Title = ({ filteredSalaries, filteredBy }) => {\n    function yearsFragment() {\n        const year = filteredBy.year;\n        return year === \"*\" ? \"\" : ` in ${year}`;\n    }\n\n    function USstateFragment() {\n        const USstate = filteredBy.USstate;\n        return USstate === \"*\" ? \"\" : USStatesMap[USstate.toUpperCase()];\n    }\n\n    function format() {\n        return d3.scaleLinear()\n            .domain(d3.extent(filteredSalaries, (d) => d.base_salary))\n            .tickFormat();\n    }\n\n    function jobTitleFragment() {\n        const { jobTitle, year } = filteredBy;\n        let title = \"\";\n\n        if (jobTitle === \"*\") {\n            if (year === \"*\") {\n                title = \"The average H1B in tech pays\";\n            } else {\n                title = \"The average tech H1B paid\";\n            }\n        } else {\n            title = `Software ${jobTitle}s on an H1B`;\n\n            if (year === \"*\") {\n                title += \" make\";\n            } else {\n                title += \" made\";\n            }\n        }\n\n        return title;\n    }\n\n    const mean = format()(d3.mean(filteredSalaries, (d) => d.base_salary));\n\n    let title;\n\n    if (yearsFragment() && USstateFragment()) {\n        title = (\n            <h2 className=\"Title\">\n                In {USstateFragment()}, {jobTitleFragment()}${mean}/year{\" \"}\n                {yearsFragment()}\n            </h2>\n        );\n    } else {\n        title = (\n            <h2 className=\"Title\">\n                {jobTitleFragment()} ${mean}/year\n                {USstateFragment() ? ` in ${USstateFragment()}` : \"\"}\n                {yearsFragment()}\n            </h2>\n        );\n    }\n    return title;\n};\n\nclass Description extends React.Component {\n    allDataForYear(year, data = this.props.allData) {\n        return data.filter((d) => d.submit_date.getFullYear() === year);\n    }\n\n    allDataForJobTitle(jobTitle, data = this.props.allData) {\n        return data.filter((d) => d.clean_job_title === jobTitle);\n    }\n\n    allDataForUSstate(USstate, data = this.props.allData) {\n        return data.filter((d) => d.USstate === USstate);\n    }\n\n    get yearsFragment() {\n        const year = this.props.filteredBy.year;\n\n        return year === \"*\" ? \"\" : `In ${year}`;\n    }\n\n    get USstateFragment() {\n        const USstate = this.props.filteredBy.USstate;\n\n        return USstate === \"*\" ? \"\" : USStatesMap[USstate.toUpperCase()];\n    }\n\n    get previousYearFragment() {\n        const year = this.props.filteredBy.year;\n\n        let fragment;\n\n        if (year === \"*\") {\n            fragment = \"\";\n        } else if (year === 2012) {\n            fragment = \"\";\n        } else {\n            const { USstate, jobTitle } = this.props.filteredBy;\n            let lastYear = this.allDataForYear(year - 1);\n\n            if (jobTitle !== \"*\") {\n                lastYear = this.allDataForJobTitle(jobTitle, lastYear);\n            }\n\n            if (USstate !== \"*\") {\n                lastYear = this.allDataForUSstate(USstate, lastYear);\n            }\n\n            if (this.props.data.length / lastYear.length > 2) {\n                fragment =\n                    \", \" +\n                    (this.props.data.length / lastYear.length).toFixed() +\n                    \" times more than the year before\";\n            } else {\n                const percent = (\n                    (1 - lastYear.length / this.props.data.length) *\n                    100\n                ).toFixed();\n\n                fragment =\n                    \", \" +\n                    Math.abs(percent) +\n                    \"% \" +\n                    (percent > 0 ? \"more\" : \"less\") +\n                    \" than the year before\";\n            }\n        }\n\n        return fragment;\n    }\n\n    get jobTitleFragment() {\n        const jobTitle = this.props.filteredBy.jobTitle;\n        let fragment;\n\n        if (jobTitle === \"*\") {\n            fragment = \"H1B work visas\";\n        } else {\n            if (jobTitle === \"other\") {\n                fragment = \"H1B work visas\";\n            } else {\n                fragment = `H1B work visas for software ${jobTitle}s`;\n            }\n        }\n\n        return fragment;\n    }\n\n    get countyFragment() {\n        const byCounty = _.groupBy(this.props.data, \"countyID\"),\n            medians = this.props.medianIncomesByCounty;\n\n        let ordered = _.sortBy(\n            _.keys(byCounty)\n                .map((county) => byCounty[county])\n                .filter((d) => d.length / this.props.data.length > 0.01),\n            (items) =>\n                d3.mean(items, (d) => d.base_salary) -\n                medians[items[0].countyID][0].medianIncome\n        );\n\n        let best = ordered[ordered.length - 1],\n            countyMedian = medians[best[0].countyID][0].medianIncome;\n\n        const byCity = _.groupBy(best, \"city\");\n\n        ordered = _.sortBy(\n            _.keys(byCity)\n                .map((city) => byCity[city])\n                .filter((d) => d.length / best.length > 0.01),\n            (items) => d3.mean(items, (d) => d.base_salary) - countyMedian\n        );\n\n        best = ordered[ordered.length - 1];\n\n        const city = S(best[0].city).titleCase().s + `, ${best[0].USstate}`,\n            mean = d3.mean(best, (d) => d.base_salary);\n\n        const jobFragment = this.jobTitleFragment\n            .replace(\"H1B work visas for\", \"\")\n            .replace(\"H1B work visas\", \"\");\n\n        return (\n            <span>\n                The best city{\" \"}\n                {jobFragment.length\n                    ? `for ${jobFragment} on an H1B`\n                    : \"for an H1B\"}{\" \"}\n                {this.yearFragment ? \"was\" : \"is\"} <b>{city}</b> with an average\n                salary ${this.format(mean - countyMedian)} above the local\n                household median. Median household income is a good proxy for\n                cost of living in an area.{\" \"}\n                <a href=\"https://en.wikipedia.org/wiki/Household_income\">[1]</a>\n                .\n            </span>\n        );\n    }\n\n    get format() {\n        return d3.scaleLinear()\n            .domain(d3.extent(this.props.data, (d) => d.base_salary))\n            .tickFormat();\n    }\n\n    render() {\n        const format = this.format,\n            mean = d3.mean(this.props.data, (d) => d.base_salary),\n            deviation = d3.deviation(this.props.data, (d) => d.base_salary);\n\n        return (\n            <p className=\"Description\">\n                {this.yearsFragment ? this.yearsFragment : \"Since 2012\"} the{\" \"}\n                {this.UStateFragment} tech industry{\" \"}\n                {this.yearsFragment ? \"sponsored\" : \"has sponsored\"}{\" \"}\n                <b>\n                    {format(this.props.data.length)} {this.jobTitleFragment}\n                </b>\n                {this.previousYearFragment}. Most of them paid{\" \"}\n                <b>\n                    ${format(mean - deviation)} to ${format(mean + deviation)}\n                </b>{\" \"}\n                per year. {this.countyFragment}\n            </p>\n        );\n    }\n}\n\nexport { Title, Description };\n","import React, { useState, useEffect } from \"react\";\n\nconst Toggle = ({ label, name, value, onClick }) => {\n    let className = \"btn btn-default\";\n    if (value) {\n        className += \" btn-primary\";\n    }\n    return (\n        <button className={className} onClick={() => onClick(name, !value)}>\n            {label}\n        </button>\n    );\n};\n\nconst ControlRow = ({\n    data,\n    toggleNames,\n    picked,\n    updateDataFilter,\n    capitalize,\n}) => {\n    function makePick(picked, newState) {\n        updateDataFilter(picked, !newState);\n    }\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-12\">\n                {toggleNames.map((name) => (\n                    <Toggle\n                        label={capitalize ? name.toUpperCase() : name}\n                        name={name}\n                        key={name}\n                        value={picked === name}\n                        onClick={makePick}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nconst Controls = ({ data, updateDataFilter }) => {\n\n    let locationHash = window.location.hash.replace(\"#\", \"\").split(\"-\")\n    const [filteredBy, setFilteredBy] = useState({\n        year: locationHash[0] || \"*\",\n        USstate: locationHash[1] || \"*\",\n        jobTitle: locationHash[2] || \"*\",\n    });\n    const [filterFunctions, setFilter] = useState({\n        year: () => true,\n        USstate: () => true,\n        jobTitle: () => true,\n    });\n\n    function reportUpdateUpTheChain() {\n        window.location.hash = [\n            filteredBy.year || \"*\",\n            filteredBy.USstate || \"*\",\n            filteredBy.jobTitle || \"*\",\n        ].join(\"-\");\n\n        const filter = (d) =>\n            filterFunctions.year(d) &&\n            filterFunctions.USstate(d) &&\n            filterFunctions.jobTitle(d);\n\n        updateDataFilter(filter, filteredBy);\n    }\n\n    const updateYearFilter = (year, reset) => {\n        let yearFilter = (d) => d.submit_date.getFullYear() === year;\n\n        if (reset || !year) {\n            yearFilter = () => true;\n            year = \"*\";\n        }\n\n        setFilteredBy((filteredBy) => {\n            return { ...filteredBy, year };\n        });\n        setFilter((filterFunctions) => {\n            return { ...filterFunctions, year: yearFilter };\n        });\n    };\n\n    const updateJobTitleFilter = (jobTitle, reset) => {\n        let jobTitleFilter = (d) => d.clean_job_title === jobTitle;\n\n        if (reset || !jobTitle) {\n            jobTitleFilter = () => true;\n            jobTitle = \"*\";\n        }\n\n        setFilteredBy((filteredBy) => {\n            return { ...filteredBy, jobTitle };\n        });\n        setFilter((filterFunctions) => {\n            return { ...filterFunctions, jobTitle: jobTitleFilter };\n        });\n    };\n\n    const updateUSstateFilter = (USstate, reset) => {\n        let USstateFilter = (d) => d.USstate === USstate;\n\n        if (reset || !USstate) {\n            USstateFilter = () => true;\n            USstate = \"*\";\n        }\n\n        setFilteredBy((filteredBy) => {\n            return { ...filteredBy, USstate };\n        });\n        setFilter((filterFunctions) => {\n            return { ...filterFunctions, USstate: USstateFilter };\n        });\n    };\n\n    useEffect(() => {\n        let [year, USstate, jobTitle] = window.location.hash\n            .replace(\"#\", \"\")\n            .split(\"-\");\n        if (year !== \"*\" && year) {\n            updateYearFilter(Number(year));\n        }\n        if (USstate !== \"*\" && USstate) {\n            updateUSstateFilter(USstate);\n        }\n        if (jobTitle !== \"*\" && jobTitle) {\n            updateJobTitleFilter(jobTitle);\n        }\n\n        reportUpdateUpTheChain();\n    }, [filteredBy, filterFunctions]);\n\n    const years = new Set(data.map((d) => d.submit_date.getFullYear()))\n    const jobTitles = new Set(data.map((d) => d.clean_job_title))\n    const USstates = new Set(data.map((d) => d.USstate))\n\n    return (\n        <div>\n            <ControlRow\n                data={data}\n                toggleNames={Array.from(years.values())}\n                picked={filteredBy.year}\n                updateDataFilter={updateYearFilter}\n            />\n            <ControlRow\n                data={data}\n                toggleNames={Array.from(jobTitles.values())}\n                picked={filteredBy.jobTitle}\n                updateDataFilter={updateJobTitleFilter}\n            />\n            <ControlRow\n                data={data}\n                toggleNames={Array.from(USstates.values())}\n                picked={filteredBy.USstate}\n                updateDataFilter={updateUSstateFilter}\n                capitalize=\"true\"\n            />\n        </div>\n    );\n};\n\nexport default Controls;\n","import React, {useState, useEffect} from 'react';\nimport * as d3 from \"d3\"\nimport _ from 'lodash';\nimport {loadAllData} from './cleaning/PreDataHandling';\nimport {countyValue} from './cleaning/PostDataHandling';\nimport './App.css';\nimport './style.css'\nimport Preloader from './components/Preloader'\nimport CountyMap from './components/CountyMap'\nimport Histogram from './components/Histogram.jsx'\nimport {Title, Description} from './components/Copy'\n\nimport Controls from \"./components/Controls\"\n\nfunction App() {\n  const [datasets, setDatasets] = useState({\n      techSalaries: [],\n      medianIncomes: [],\n      countyNames: [],\n      usTopoJson: null,\n      USstateNames: null,\n      medianIncomesByUSState: {},\n      medianIncomesByCounty: {},\n  });\n  const [salariesFilter, setSalariesFilter] = useState(() => () => true);\n  const [filteredBy, setFilteredBy] = useState({\n      USstate: \"*\",\n      year: \"*\",\n      jobTitle: \"*\",\n  });\n\n  const {\n      techSalaries,\n      medianIncomes,\n      countyNames,\n      usTopoJson,\n      USstateNames,\n      medianIncomesByCounty,\n      medianIncomesByUSState,\n  } = datasets;\n\n  async function loadData() {\n      const datasets = await loadAllData();\n      setDatasets(datasets);\n  }\n\n  function updateDataFilter(filter, filteredBy) {\n      setFilteredBy(filteredBy);\n      setSalariesFilter(() => filter);\n  }\n\n  useEffect(() => {\n      loadData();\n  }, []);\n\n  const salaryAccessor = d => d.base_salary\n  const filteredSalaries = techSalaries.filter(salariesFilter),\n      filteredSalariesMap = _.groupBy(filteredSalaries, \"countyID\"),\n      countyValues = countyNames\n          .map((county) => countyValue(county, filteredSalariesMap, medianIncomes))\n          .filter((d) => !_.isNull(d));\n\n  if (techSalaries.length < 1) {\n      return <Preloader />;\n  } else {\n      let zoom = null,\n          medianHousehold = medianIncomesByUSState[\"US\"][0].medianIncome;\n\n      if (filteredBy.USstate !== \"*\") {\n          zoom = filteredBy.USstate;\n          medianHousehold = d3.mean(\n              medianIncomesByUSState[zoom],\n              (d) => d.medianIncome\n          );\n      }\n\n      return (\n        <div className=\"App\">\n        <div className=\"Header\">\n          <Title \n            filteredSalaries={filteredSalaries} \n            filteredBy={filteredBy} \n          />\n          <Description\n            data={filteredSalaries}\n            allData={techSalaries}\n            filteredBy={filteredBy}\n            medianIncomesByCounty={medianIncomesByCounty}\n          />\n        </div>\n        <div className=\"Chart-area\">\n          <CountyMap \n            usTopoJson={usTopoJson}\n            USstateNames={USstateNames}\n            values={countyValues}\n            zoom={zoom}    \n          />\n          <Histogram \n            data={filteredSalaries}\n            xAccessor={salaryAccessor}\n            medianHousehold={medianHousehold}\n          />\n          <Controls \n            data={techSalaries}\n            updateDataFilter={updateDataFilter}\n          />\n        </div>\n      </div>\n      );\n  }\n}\n\nexport default App;\n","import * as d3 from 'd3'\n\n\nexport const countyValue = (county, techSalariesMap, medianIncomes) => {\n    const medianHousehold = medianIncomes[county.id],\n          salaries = techSalariesMap[county.name]\n\n    if (!medianHousehold || !salaries) {\n      return null\n    }\n    const median = d3.median(salaries, (d) => d.base_salary)\n    return {\n      countyID: county.id,\n      value: median - medianHousehold.medianIncome,\n    }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}